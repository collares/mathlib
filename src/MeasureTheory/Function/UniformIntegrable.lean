/-
Copyright (c) 2022 Kexing Ying. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kexing Ying
-/
import Mathbin.MeasureTheory.Function.ConvergenceInMeasure

/-!
# Uniform integrability

This file contains the definitions for uniform integrability (both in the measure theory sense
as well as the probability theory sense). This file also contains the Vitali convergence theorem
which estabishes a relation between uniform integrability, convergence in measure and
Lp convergence.

Uniform integrability plays a vital role in the theory of martingales most notably is used to
fomulate the martingale convergence theorem.

## Main definitions

* `measure_theory.unif_integrable`: uniform integrability in the measure theory sense.
  In particular, a sequence of functions `f` is uniformly integrable if for all `Œµ > 0`, there
  exists some `Œ¥ > 0` such that for all sets `s` of smaller measure than `Œ¥`, the Lp-norm of
  `f i` restricted `s` is smaller than `Œµ` for all `i`.
* `measure_theory.uniform_integrable`: uniform integrability in the probability theory sense.
  In particular, a sequence of measurable functions `f` is uniformly integrable in the
  probability theory sense if it is uniformly integrable in the measure theory sense and
  has uniformly bounded Lp-norm.

# Main results

* `measure_theory.unif_integrable_fintype`: a finite sequence of Lp functions is uniformly
  integrable.
* `measure_theory.tendsto_Lp_of_tendsto_ae`: a sequence of Lp functions which is uniformly
  integrable converges in Lp if they converge almost everywhere.
* `measure_theory.tendsto_in_measure_iff_tendsto_Lp`: Vitali convergence theorem:
  a sequence of Lp functions converges in Lp if and only if it is uniformly integrable
  and converges in measure.

## Tags
uniform integrable, uniformly absolutely continuous integral, Vitali convergence theorem
-/


noncomputable section

open_locale Classical MeasureTheory Nnreal Ennreal TopologicalSpace

namespace MeasureTheory

open Set Filter TopologicalSpace

variable {Œ± Œ≤ Œπ : Type _} {m : MeasurableSpace Œ±} {Œº : Measure Œ±} [NormedGroup Œ≤]

/-- Uniform integrability in the measure theory sense.

A sequence of functions `f` is said to be uniformly integrable if for all `Œµ > 0`, there exists
some `Œ¥ > 0` such that for all sets `s` with measure less than `Œ¥`, the Lp-norm of `f i`
restricted on `s` is less than `Œµ`.

Uniform integrablility is also known as uniformly absolutely continuous integrals. -/
def UnifIntegrable {m : MeasurableSpace Œ±} (f : Œπ ‚Üí Œ± ‚Üí Œ≤) (p : ‚Ñù‚â•0‚àû) (Œº : Measure Œ±) : Prop :=
  ‚àÄ ‚¶ÉŒµ : ‚Ñù‚¶Ñ hŒµ : 0 < Œµ,
    ‚àÉ (Œ¥ : ‚Ñù)(hŒ¥ : 0 < Œ¥),
      ‚àÄ i s, MeasurableSet s ‚Üí Œº s ‚â§ Ennreal.ofReal Œ¥ ‚Üí snorm (s.indicator (f i)) p Œº ‚â§ Ennreal.ofReal Œµ

/-- In probability theory, a family of measurable functions is uniformly integrable if it is
uniformly integrable in the measure theory sense and is uniformly bounded. -/
def UniformIntegrable {m : MeasurableSpace Œ±} [MeasurableSpace Œ≤] (f : Œπ ‚Üí Œ± ‚Üí Œ≤) (p : ‚Ñù‚â•0‚àû) (Œº : Measure Œ±) : Prop :=
  (‚àÄ i, Measurable (f i)) ‚àß UnifIntegrable f p Œº ‚àß ‚àÉ C : ‚Ñù‚â•0 , ‚àÄ i, snorm (f i) p Œº ‚â§ C

theorem UniformIntegrable.measurable {mŒ≤ : MeasurableSpace Œ≤} {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {p : ‚Ñù‚â•0‚àû} (hf : UniformIntegrable f p Œº)
    (i : Œπ) : Measurable (f i) :=
  hf.1 i

theorem UniformIntegrable.unif_integrable {mŒ≤ : MeasurableSpace Œ≤} {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {p : ‚Ñù‚â•0‚àû}
    (hf : UniformIntegrable f p Œº) : UnifIntegrable f p Œº :=
  hf.2.1

theorem UniformIntegrable.mem_‚Ñíp {mŒ≤ : MeasurableSpace Œ≤} {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {p : ‚Ñù‚â•0‚àû} (hf : UniformIntegrable f p Œº)
    (i : Œπ) : Mem‚Ñíp (f i) p Œº :=
  ‚ü®(hf.1 i).AeMeasurable,
    let ‚ü®_, _, hC‚ü© := hf.2
    lt_of_le_of_lt‚Çì (hC i) Ennreal.coe_lt_top‚ü©

section UnifIntegrable

/-! ### `unif_integrable`

This section deals with uniform integrability in the measure theory sense. -/


namespace UnifIntegrable

variable {f g : Œπ ‚Üí Œ± ‚Üí Œ≤} {p : ‚Ñù‚â•0‚àû}

protected theorem add {mŒ≤ : MeasurableSpace Œ≤} [OpensMeasurableSpace Œ≤] (hf : UnifIntegrable f p Œº)
    (hg : UnifIntegrable g p Œº) (hp : 1 ‚â§ p) (hf_meas : ‚àÄ i, AeMeasurable (f i) Œº)
    (hg_meas : ‚àÄ i, AeMeasurable (g i) Œº) : UnifIntegrable (f + g) p Œº := by
  intro Œµ hŒµ
  have hŒµ2 : 0 < Œµ / 2 := half_pos hŒµ
  obtain ‚ü®Œ¥‚ÇÅ, hŒ¥‚ÇÅ_pos, hfŒ¥‚ÇÅ‚ü© := hf hŒµ2
  obtain ‚ü®Œ¥‚ÇÇ, hŒ¥‚ÇÇ_pos, hgŒ¥‚ÇÇ‚ü© := hg hŒµ2
  refine' ‚ü®min Œ¥‚ÇÅ Œ¥‚ÇÇ, lt_min‚Çì hŒ¥‚ÇÅ_pos hŒ¥‚ÇÇ_pos, fun i s hs hŒºs => _‚ü©
  simp_rw [Pi.add_apply, indicator_add']
  refine' (snorm_add_le ((hf_meas i).indicator hs) ((hg_meas i).indicator hs) hp).trans _
  have hŒµ_halves : Ennreal.ofReal Œµ = Ennreal.ofReal (Œµ / 2) + Ennreal.ofReal (Œµ / 2) := by
    rw [‚Üê Ennreal.of_real_add hŒµ2.le hŒµ2.le, add_halves]
  rw [hŒµ_halves]
  exact
    add_le_add (hfŒ¥‚ÇÅ i s hs (hŒºs.trans (Ennreal.of_real_le_of_real (min_le_left‚Çì _ _))))
      (hgŒ¥‚ÇÇ i s hs (hŒºs.trans (Ennreal.of_real_le_of_real (min_le_right‚Çì _ _))))

protected theorem neg (hf : UnifIntegrable f p Œº) : UnifIntegrable (-f) p Œº := by
  simp_rw [unif_integrable, Pi.neg_apply, indicator_neg', snorm_neg]
  exact hf

protected theorem sub {mŒ≤ : MeasurableSpace Œ≤} [OpensMeasurableSpace Œ≤] [HasMeasurableNeg Œ≤] (hf : UnifIntegrable f p Œº)
    (hg : UnifIntegrable g p Œº) (hp : 1 ‚â§ p) (hf_meas : ‚àÄ i, AeMeasurable (f i) Œº)
    (hg_meas : ‚àÄ i, AeMeasurable (g i) Œº) : UnifIntegrable (f - g) p Œº := by
  rw [sub_eq_add_neg]
  exact hf.add hg.neg hp hf_meas fun i => (hg_meas i).neg

protected theorem ae_eq (hf : UnifIntegrable f p Œº) (hfg : ‚àÄ n, f n =·µê[Œº] g n) : UnifIntegrable g p Œº := by
  intro Œµ hŒµ
  obtain ‚ü®Œ¥, hŒ¥_pos, hfŒ¥‚ü© := hf hŒµ
  refine' ‚ü®Œ¥, hŒ¥_pos, fun n s hs hŒºs => (le_of_eq‚Çì <| snorm_congr_ae _).trans (hfŒ¥ n s hs hŒºs)‚ü©
  filter_upwards [hfg n] with x hx
  simp_rw [indicator_apply, hx]

end UnifIntegrable

theorem unif_integrable_congr_ae {f g : Œπ ‚Üí Œ± ‚Üí Œ≤} {p : ‚Ñù‚â•0‚àû} (hfg : ‚àÄ n, f n =·µê[Œº] g n) :
    UnifIntegrable f p Œº ‚Üî UnifIntegrable g p Œº :=
  ‚ü®fun hf => hf.ae_eq hfg, fun hg => hg.ae_eq fun n => (hfg n).symm‚ü©

theorem tendsto_indicator_ge (f : Œ± ‚Üí Œ≤) (x : Œ±) :
    Tendsto (fun M : ‚Ñï => { x | (M : ‚Ñù) ‚â§ ‚à•f x‚à•‚Çä }.indicator f x) atTop (ùìù 0) := by
  refine' @tendsto_at_top_of_eventually_const _ _ _ _ _ _ _ (Nat.ceil (‚à•f x‚à•‚Çä : ‚Ñù) + 1) fun n hn => _
  rw [indicator_of_not_mem]
  simp only [not_le‚Çì, mem_set_of_eq]
  refine' lt_of_le_of_lt‚Çì (Nat.le_ceil _) _
  refine' lt_of_lt_of_le‚Çì (lt_add_one _) _
  norm_cast
  rwa [ge_iff_le, coe_nnnorm] at hn

variable (Œº) {p : ‚Ñù‚â•0‚àû}

section

variable [MeasurableSpace Œ≤] [BorelSpace Œ≤] [hŒ≤ : SecondCountableTopology Œ≤] {f : Œ± ‚Üí Œ≤}

include hŒ≤

/-- This lemma is weaker than `measure_theory.mem_‚Ñíp.integral_indicator_norm_ge_nonneg_le`
as the latter provides `0 ‚â§ M` and does not require the measurability of `f`. -/
theorem Mem‚Ñíp.integral_indicator_norm_ge_le (hf : Mem‚Ñíp f 1 Œº) (hmeas : Measurable f) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) :
    ‚àÉ M : ‚Ñù, (‚à´‚Åª x, ‚à•{ x | M ‚â§ ‚à•f x‚à•‚Çä }.indicator f x‚à•‚Çä ‚àÇŒº) ‚â§ Ennreal.ofReal Œµ := by
  have htendsto : ‚àÄ·µê x ‚àÇŒº, tendsto (fun M : ‚Ñï => { x | (M : ‚Ñù) ‚â§ ‚à•f x‚à•‚Çä }.indicator f x) at_top (ùìù 0) :=
    univ_mem' (id fun x => tendsto_indicator_ge f x)
  have hmeas : ‚àÄ M : ‚Ñï, AeMeasurable ({ x | (M : ‚Ñù) ‚â§ ‚à•f x‚à•‚Çä }.indicator f) Œº := by
    cases hf
    measurability
  have hbound : has_finite_integral (fun x => ‚à•f x‚à•) Œº := by
    rw [mem_‚Ñíp_one_iff_integrable] at hf
    exact hf.norm.2
  have := tendsto_lintegral_norm_of_dominated_convergence hmeas hbound _ htendsto
  ¬∑ rw [Ennreal.tendsto_at_top_zero] at this
    obtain ‚ü®M, hM‚ü© := this (Ennreal.ofReal Œµ) (Ennreal.of_real_pos.2 hŒµ)
    simp only [true_and‚Çì, ge_iff_le, zero_tsub, zero_le, sub_zero, zero_add‚Çì, coe_nnnorm, mem_Icc] at hM
    refine' ‚ü®M, _‚ü©
    convert hM M le_rfl
    ext1 x
    simp only [coe_nnnorm, Ennreal.of_real_eq_coe_nnreal (norm_nonneg _)]
    rfl
    
  ¬∑ refine' fun n => univ_mem' (id fun x => _)
    by_cases' hx : (n : ‚Ñù) ‚â§ ‚à•f x‚à•
    ¬∑ dsimp
      rwa [indicator_of_mem]
      
    ¬∑ dsimp
      rw [indicator_of_not_mem, norm_zero]
      ¬∑ exact norm_nonneg _
        
      ¬∑ assumption
        
      
    

/-- This lemma is superceded by `measure_theory.mem_‚Ñíp.integral_indicator_norm_ge_nonneg_le`
which does not require measurability. -/
theorem Mem‚Ñíp.integral_indicator_norm_ge_nonneg_le_of_meas (hf : Mem‚Ñíp f 1 Œº) (hmeas : Measurable f) {Œµ : ‚Ñù}
    (hŒµ : 0 < Œµ) : ‚àÉ M : ‚Ñù, 0 ‚â§ M ‚àß (‚à´‚Åª x, ‚à•{ x | M ‚â§ ‚à•f x‚à•‚Çä }.indicator f x‚à•‚Çä ‚àÇŒº) ‚â§ Ennreal.ofReal Œµ :=
  let ‚ü®M, hM‚ü© := hf.integral_indicator_norm_ge_le Œº hmeas hŒµ
  ‚ü®max M 0, le_max_right‚Çì _ _, by
    simpa‚ü©

theorem Mem‚Ñíp.integral_indicator_norm_ge_nonneg_le (hf : Mem‚Ñíp f 1 Œº) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) :
    ‚àÉ M : ‚Ñù, 0 ‚â§ M ‚àß (‚à´‚Åª x, ‚à•{ x | M ‚â§ ‚à•f x‚à•‚Çä }.indicator f x‚à•‚Çä ‚àÇŒº) ‚â§ Ennreal.ofReal Œµ := by
  have hf_mk : mem_‚Ñíp (hf.1.mk f) 1 Œº := (mem_‚Ñíp_congr_ae hf.1.ae_eq_mk).mp hf
  obtain ‚ü®M, hM_pos, hfM‚ü© := hf_mk.integral_indicator_norm_ge_nonneg_le_of_meas Œº hf.1.measurable_mk hŒµ
  refine' ‚ü®M, hM_pos, (le_of_eq‚Çì _).trans hfM‚ü©
  refine' lintegral_congr_ae _
  filter_upwards [hf.1.ae_eq_mk] with x hx
  simp only [indicator_apply, coe_nnnorm, mem_set_of_eq, Ennreal.coe_eq_coe, hx.symm]

omit hŒ≤

theorem Mem‚Ñíp.snorm_ess_sup_indicator_norm_ge_eq_zero (hf : Mem‚Ñíp f ‚àû Œº) (hmeas : Measurable f) :
    ‚àÉ M : ‚Ñù, snormEssSup ({ x | M ‚â§ ‚à•f x‚à•‚Çä }.indicator f) Œº = 0 := by
  have hbdd : snorm_ess_sup f Œº < ‚àû := hf.snorm_lt_top
  refine' ‚ü®(snorm f ‚àû Œº + 1).toReal, _‚ü©
  rw [snorm_ess_sup_indicator_eq_snorm_ess_sup_restrict]
  have : Œº.restrict { x : Œ± | (snorm f ‚ä§ Œº + 1).toReal ‚â§ ‚à•f x‚à•‚Çä } = 0 := by
    simp only [coe_nnnorm, snorm_exponent_top, measure.restrict_eq_zero]
    have : { x : Œ± | (snorm_ess_sup f Œº + 1).toReal ‚â§ ‚à•f x‚à• } ‚äÜ { x : Œ± | snorm_ess_sup f Œº < ‚à•f x‚à•‚Çä } := by
      intro x hx
      rw [mem_set_of_eq, ‚Üê Ennreal.to_real_lt_to_real hbdd.ne ennreal.coe_lt_top.ne, Ennreal.coe_to_real, coe_nnnorm]
      refine' lt_of_lt_of_le‚Çì _ hx
      rw [Ennreal.to_real_lt_to_real hbdd.ne]
      ¬∑ exact Ennreal.lt_add_right hbdd.ne one_ne_zero
        
      ¬∑ exact (Ennreal.add_lt_top.2 ‚ü®hbdd, Ennreal.one_lt_top‚ü©).Ne
        
    rw [‚Üê nonpos_iff_eq_zero]
    refine' (measure_mono this).trans _
    have hle := coe_nnnorm_ae_le_snorm_ess_sup f Œº
    simp_rw [ae_iff, not_le‚Çì]  at hle
    exact nonpos_iff_eq_zero.2 hle
  rw [this, snorm_ess_sup_measure_zero]
  exact measurable_set_le measurable_const hmeas.nnnorm.subtype_coe

/- This lemma is slightly weaker than `measure_theory.mem_‚Ñíp.snorm_indicator_norm_ge_pos_le` as the
latter provides `0 < M`. -/
theorem Mem‚Ñíp.snorm_indicator_norm_ge_le (hf : Mem‚Ñíp f p Œº) (hmeas : Measurable f) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) :
    ‚àÉ M : ‚Ñù, snorm ({ x | M ‚â§ ‚à•f x‚à•‚Çä }.indicator f) p Œº ‚â§ Ennreal.ofReal Œµ := by
  by_cases' hp_ne_zero : p = 0
  ¬∑ refine' ‚ü®1, hp_ne_zero.symm ‚ñ∏ _‚ü©
    simp [snorm_exponent_zero]
    
  by_cases' hp_ne_top : p = ‚àû
  ¬∑ subst hp_ne_top
    obtain ‚ü®M, hM‚ü© := hf.snorm_ess_sup_indicator_norm_ge_eq_zero Œº hmeas
    refine' ‚ü®M, _‚ü©
    simp only [snorm_exponent_top, hM, zero_le]
    
  obtain ‚ü®M, hM', hM‚ü© :=
    @mem_‚Ñíp.integral_indicator_norm_ge_nonneg_le _ _ _ Œº _ _ _ _ (fun x => ‚à•f x‚à• ^ p.to_real)
      (hf.norm_rpow hp_ne_zero hp_ne_top) _ (Real.rpow_pos_of_pos hŒµ p.to_real)
  refine' ‚ü®M ^ (1 / p.to_real), _‚ü©
  rw [snorm_eq_lintegral_rpow_nnnorm hp_ne_zero hp_ne_top, ‚Üê Ennreal.rpow_one (Ennreal.ofReal Œµ)]
  conv_rhs => rw [‚Üê mul_one_div_cancel (Ennreal.to_real_pos hp_ne_zero hp_ne_top).Ne.symm]
  rw [Ennreal.rpow_mul, Ennreal.rpow_le_rpow_iff (one_div_pos.2 <| Ennreal.to_real_pos hp_ne_zero hp_ne_top),
    Ennreal.of_real_rpow_of_pos hŒµ]
  convert hM
  ext1 x
  rw [Ennreal.coe_rpow_of_nonneg _ Ennreal.to_real_nonneg, nnnorm_indicator_eq_indicator_nnnorm,
    nnnorm_indicator_eq_indicator_nnnorm]
  have hiff : M ^ (1 / p.to_real) ‚â§ ‚à•f x‚à•‚Çä ‚Üî M ‚â§ ‚à•‚à•f x‚à• ^ p.to_real‚à•‚Çä := by
    rw [coe_nnnorm, coe_nnnorm, Real.norm_rpow_of_nonneg (norm_nonneg _), norm_norm, ‚Üê
      Real.rpow_le_rpow_iff hM' (Real.rpow_nonneg_of_nonneg (norm_nonneg _) _)
        (one_div_pos.2 <| Ennreal.to_real_pos hp_ne_zero hp_ne_top),
      ‚Üê Real.rpow_mul (norm_nonneg _), mul_one_div_cancel (Ennreal.to_real_pos hp_ne_zero hp_ne_top).Ne.symm,
      Real.rpow_one]
  by_cases' hx : x ‚àà { x : Œ± | M ^ (1 / p.to_real) ‚â§ ‚à•f x‚à•‚Çä }
  ¬∑ rw [Set.indicator_of_mem hx, Set.indicator_of_mem, Real.nnnorm_of_nonneg]
    rfl
    change _ ‚â§ _
    rwa [‚Üê hiff]
    
  ¬∑ rw [Set.indicator_of_not_mem hx, Set.indicator_of_not_mem]
    ¬∑ simp [(Ennreal.to_real_pos hp_ne_zero hp_ne_top).Ne.symm]
      
    ¬∑ change ¬¨_ ‚â§ _
      rwa [‚Üê hiff]
      
    

/-- This lemma implies that a single function is uniformly integrable (in the probability sense). -/
theorem Mem‚Ñíp.snorm_indicator_norm_ge_pos_le (hf : Mem‚Ñíp f p Œº) (hmeas : Measurable f) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) :
    ‚àÉ M : ‚Ñù, 0 < M ‚àß snorm ({ x | M ‚â§ ‚à•f x‚à•‚Çä }.indicator f) p Œº ‚â§ Ennreal.ofReal Œµ := by
  obtain ‚ü®M, hM‚ü© := hf.snorm_indicator_norm_ge_le Œº hmeas hŒµ
  refine' ‚ü®max M 1, lt_of_lt_of_le‚Çì zero_lt_one (le_max_right‚Çì _ _), le_trans‚Çì (snorm_mono fun x => _) hM‚ü©
  rw [norm_indicator_eq_indicator_norm, norm_indicator_eq_indicator_norm]
  refine' indicator_le_indicator_of_subset (fun x hx => _) (fun x => norm_nonneg _) x
  change max _ _ ‚â§ _ at hx
  -- removing the `change` breaks the proof!
  exact (max_le_iff.1 hx).1

end

-- ././Mathport/Syntax/Translate/Basic.lean:535:40: in filter_upwards: ././Mathport/Syntax/Translate/Basic.lean:223:22: unsupported: parse error
theorem snorm_indicator_le_of_bound {f : Œ± ‚Üí Œ≤} (hp_top : p ‚â† ‚àû) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) {M : ‚Ñù} (hf : ‚àÄ x, ‚à•f x‚à• < M) :
    ‚àÉ (Œ¥ : ‚Ñù)(hŒ¥ : 0 < Œ¥),
      ‚àÄ s, MeasurableSet s ‚Üí Œº s ‚â§ Ennreal.ofReal Œ¥ ‚Üí snorm (s.indicator f) p Œº ‚â§ Ennreal.ofReal Œµ :=
  by
  by_cases' hM : M ‚â§ 0
  ¬∑ refine' ‚ü®1, zero_lt_one, fun s hs hŒº => _‚ü©
    rw [(_ : f = 0)]
    ¬∑ simp [hŒµ.le]
      
    ¬∑ ext x
      rw [Pi.zero_apply, ‚Üê norm_le_zero_iff]
      exact (lt_of_lt_of_le‚Çì (hf x) hM).le
      
    
  rw [not_le‚Çì] at hM
  refine' ‚ü®(Œµ / M) ^ p.to_real, Real.rpow_pos_of_pos (div_pos hŒµ hM) _, fun s hs hŒº => _‚ü©
  by_cases' hp : p = 0
  ¬∑ simp [hp]
    
  rw [snorm_indicator_eq_snorm_restrict hs]
  have haebdd : ‚àÄ·µê x ‚àÇŒº.restrict s, ‚à•f x‚à• ‚â§ M := by
    "././Mathport/Syntax/Translate/Basic.lean:535:40: in filter_upwards: ././Mathport/Syntax/Translate/Basic.lean:223:22: unsupported: parse error"
    exact fun x => (hf x).le
  refine' le_trans‚Çì (snorm_le_of_ae_bound haebdd) _
  rw [measure.restrict_apply MeasurableSet.univ, univ_inter, ‚Üê
    Ennreal.le_div_iff_mul_le (Or.inl _) (Or.inl Ennreal.of_real_ne_top)]
  ¬∑ rw [‚Üê one_div, Ennreal.rpow_one_div_le_iff (Ennreal.to_real_pos hp hp_top)]
    refine' le_trans‚Çì hŒº _
    rw [‚Üê Ennreal.of_real_rpow_of_pos (div_pos hŒµ hM), Ennreal.rpow_le_rpow_iff (Ennreal.to_real_pos hp hp_top),
      Ennreal.of_real_div_of_pos hM]
    exact le_rfl
    
  ¬∑ simpa only [Ennreal.of_real_eq_zero, not_le‚Çì, Ne.def]
    

section

variable [MeasurableSpace Œ≤] [BorelSpace Œ≤] {f : Œ± ‚Üí Œ≤}

/-- Auxiliary lemma for `measure_theory.mem_‚Ñíp.snorm_indicator_le`. -/
theorem Mem‚Ñíp.snorm_indicator_le' (hp_one : 1 ‚â§ p) (hp_top : p ‚â† ‚àû) (hf : Mem‚Ñíp f p Œº) (hmeas : Measurable f) {Œµ : ‚Ñù}
    (hŒµ : 0 < Œµ) :
    ‚àÉ (Œ¥ : ‚Ñù)(hŒ¥ : 0 < Œ¥),
      ‚àÄ s, MeasurableSet s ‚Üí Œº s ‚â§ Ennreal.ofReal Œ¥ ‚Üí snorm (s.indicator f) p Œº ‚â§ 2 * Ennreal.ofReal Œµ :=
  by
  obtain ‚ü®M, hMpos, hM‚ü© := hf.snorm_indicator_norm_ge_pos_le Œº hmeas hŒµ
  obtain ‚ü®Œ¥, hŒ¥pos, hŒ¥‚ü© := @snorm_indicator_le_of_bound _ _ _ Œº _ _ ({ x | ‚à•f x‚à• < M }.indicator f) hp_top _ hŒµ M _
  ¬∑ refine' ‚ü®Œ¥, hŒ¥pos, fun s hs hŒºs => _‚ü©
    rw [(_ : f = { x : Œ± | M ‚â§ ‚à•f x‚à•‚Çä }.indicator f + { x : Œ± | ‚à•f x‚à• < M }.indicator f)]
    ¬∑ rw [snorm_indicator_eq_snorm_restrict hs]
      refine' le_trans‚Çì (snorm_add_le _ _ hp_one) _
      ¬∑ exact Measurable.ae_measurable (hmeas.indicator (measurable_set_le measurable_const hmeas.nnnorm.subtype_coe))
        
      ¬∑ exact Measurable.ae_measurable (hmeas.indicator (measurable_set_lt hmeas.nnnorm.subtype_coe measurable_const))
        
      ¬∑ rw [two_mul]
        refine' add_le_add (le_trans‚Çì (snorm_mono_measure _ measure.restrict_le_self) hM) _
        rw [‚Üê snorm_indicator_eq_snorm_restrict hs]
        exact hŒ¥ s hs hŒºs
        
      
    ¬∑ ext x
      by_cases' hx : M ‚â§ ‚à•f x‚à•
      ¬∑ rw [Pi.add_apply, indicator_of_mem, indicator_of_not_mem, add_zero‚Çì] <;> simpa
        
      ¬∑ rw [Pi.add_apply, indicator_of_not_mem, indicator_of_mem, zero_add‚Çì] <;> simpa using hx
        
      
    
  ¬∑ intro x
    rw [norm_indicator_eq_indicator_norm, indicator_apply]
    split_ifs
    exacts[h, hMpos]
    

/-- This lemma is superceded by `measure_theory.mem_‚Ñíp.snorm_indicator_le` which does not require
measurability on `f`. -/
theorem Mem‚Ñíp.snorm_indicator_le_of_meas (hp_one : 1 ‚â§ p) (hp_top : p ‚â† ‚àû) (hf : Mem‚Ñíp f p Œº) (hmeas : Measurable f)
    {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) :
    ‚àÉ (Œ¥ : ‚Ñù)(hŒ¥ : 0 < Œ¥),
      ‚àÄ s, MeasurableSet s ‚Üí Œº s ‚â§ Ennreal.ofReal Œ¥ ‚Üí snorm (s.indicator f) p Œº ‚â§ Ennreal.ofReal Œµ :=
  by
  obtain ‚ü®Œ¥, hŒ¥pos, hŒ¥‚ü© := hf.snorm_indicator_le' Œº hp_one hp_top hmeas (half_pos hŒµ)
  refine' ‚ü®Œ¥, hŒ¥pos, fun s hs hŒºs => le_trans‚Çì (hŒ¥ s hs hŒºs) _‚ü©
  rw [Ennreal.of_real_div_of_pos zero_lt_two,
      (by
        norm_num : Ennreal.ofReal 2 = 2),
      Ennreal.mul_div_cancel'] <;>
    norm_num

theorem Mem‚Ñíp.snorm_indicator_le (hp_one : 1 ‚â§ p) (hp_top : p ‚â† ‚àû) (hf : Mem‚Ñíp f p Œº) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) :
    ‚àÉ (Œ¥ : ‚Ñù)(hŒ¥ : 0 < Œ¥),
      ‚àÄ s, MeasurableSet s ‚Üí Œº s ‚â§ Ennreal.ofReal Œ¥ ‚Üí snorm (s.indicator f) p Œº ‚â§ Ennreal.ofReal Œµ :=
  by
  have h‚Ñíp := hf
  obtain ‚ü®‚ü®f', hf', heq‚ü©, hnorm‚ü© := hf
  obtain ‚ü®Œ¥, hŒ¥pos, hŒ¥‚ü© := (h‚Ñíp.ae_eq HEq).snorm_indicator_le_of_meas Œº hp_one hp_top hf' hŒµ
  refine' ‚ü®Œ¥, hŒ¥pos, fun s hs hŒºs => _‚ü©
  convert hŒ¥ s hs hŒºs using 1
  rw [snorm_indicator_eq_snorm_restrict hs, snorm_indicator_eq_snorm_restrict hs]
  refine' snorm_congr_ae heq.restrict

/-- A constant function is uniformly integrable. -/
theorem unif_integrable_const {g : Œ± ‚Üí Œ≤} (hp : 1 ‚â§ p) (hp_ne_top : p ‚â† ‚àû) (hg : Mem‚Ñíp g p Œº) :
    UnifIntegrable (fun n : Œπ => g) p Œº := by
  intro Œµ hŒµ
  obtain ‚ü®Œ¥, hŒ¥_pos, hgŒ¥‚ü© := hg.snorm_indicator_le Œº hp hp_ne_top hŒµ
  exact ‚ü®Œ¥, hŒ¥_pos, fun i => hgŒ¥‚ü©

/-- A single function is uniformly integrable. -/
theorem unif_integrable_subsingleton [Subsingleton Œπ] (hp_one : 1 ‚â§ p) (hp_top : p ‚â† ‚àû) {f : Œπ ‚Üí Œ± ‚Üí Œ≤}
    (hf : ‚àÄ i, Mem‚Ñíp (f i) p Œº) : UnifIntegrable f p Œº := by
  intro Œµ hŒµ
  by_cases' hŒπ : Nonempty Œπ
  ¬∑ cases' hŒπ with i
    obtain ‚ü®Œ¥, hŒ¥pos, hŒ¥‚ü© := (hf i).snorm_indicator_le Œº hp_one hp_top hŒµ
    refine' ‚ü®Œ¥, hŒ¥pos, fun j s hs hŒºs => _‚ü©
    convert hŒ¥ s hs hŒºs
    
  ¬∑ exact ‚ü®1, zero_lt_one, fun i => False.elim <| hŒπ <| Nonempty.intro i‚ü©
    

/-- This lemma is less general than `measure_theory.unif_integrable_fintype` which applies to
all sequences indexed by a fintype. -/
theorem unif_integrable_fin (hp_one : 1 ‚â§ p) (hp_top : p ‚â† ‚àû) {n : ‚Ñï} {f : Fin‚Çì n ‚Üí Œ± ‚Üí Œ≤} (hf : ‚àÄ i, Mem‚Ñíp (f i) p Œº) :
    UnifIntegrable f p Œº := by
  revert f
  induction' n with n h
  ¬∑ exact fun f hf => unif_integrable_subsingleton Œº hp_one hp_top hf
    
  intro f hfLp Œµ hŒµ
  set g : Fin‚Çì n ‚Üí Œ± ‚Üí Œ≤ := fun k => f k with hg
  have hgLp : ‚àÄ i, mem_‚Ñíp (g i) p Œº := fun i => hfLp i
  obtain ‚ü®Œ¥‚ÇÅ, hŒ¥‚ÇÅpos, hŒ¥‚ÇÅ‚ü© := h hgLp hŒµ
  obtain ‚ü®Œ¥‚ÇÇ, hŒ¥‚ÇÇpos, hŒ¥‚ÇÇ‚ü© := (hfLp n).snorm_indicator_le Œº hp_one hp_top hŒµ
  refine' ‚ü®min Œ¥‚ÇÅ Œ¥‚ÇÇ, lt_min‚Çì hŒ¥‚ÇÅpos hŒ¥‚ÇÇpos, fun i s hs hŒºs => _‚ü©
  by_cases' hi : i.val < n
  ¬∑ rw [(_ : f i = g ‚ü®i.val, hi‚ü©)]
    ¬∑ exact hŒ¥‚ÇÅ _ s hs (le_trans‚Çì hŒºs <| Ennreal.of_real_le_of_real <| min_le_left‚Çì _ _)
      
    ¬∑ rw [hg]
      simp
      
    
  ¬∑ rw [(_ : i = n)]
    ¬∑ exact hŒ¥‚ÇÇ _ hs (le_trans‚Çì hŒºs <| Ennreal.of_real_le_of_real <| min_le_right‚Çì _ _)
      
    ¬∑ have hi' := Fin‚Çì.is_lt i
      rw [Nat.lt_succ_iff‚Çì] at hi'
      rw [not_lt‚Çì] at hi
      simp [‚Üê le_antisymm‚Çì hi' hi]
      
    

/-- A finite sequence of Lp functions is uniformly integrable. -/
theorem unif_integrable_fintype [Fintype Œπ] (hp_one : 1 ‚â§ p) (hp_top : p ‚â† ‚àû) {f : Œπ ‚Üí Œ± ‚Üí Œ≤}
    (hf : ‚àÄ i, Mem‚Ñíp (f i) p Œº) : UnifIntegrable f p Œº := by
  intro Œµ hŒµ
  set g : Fin‚Çì (Fintype.card Œπ) ‚Üí Œ± ‚Üí Œ≤ := f ‚àò (Fintype.equivFin Œπ).symm
  have hg : ‚àÄ i, mem_‚Ñíp (g i) p Œº := fun _ => hf _
  obtain ‚ü®Œ¥, hŒ¥pos, hŒ¥‚ü© := unif_integrable_fin Œº hp_one hp_top hg hŒµ
  exact
    ‚ü®Œ¥, hŒ¥pos, fun i s hs hŒºs => Equiv‚Çì.symm_apply_apply (Fintype.equivFin Œπ) i ‚ñ∏ hŒ¥ (Fintype.equivFin Œπ i) s hs hŒºs‚ü©

end

theorem snorm_sub_le_of_dist_bdd {p : ‚Ñù‚â•0‚àû} (hp : p ‚â† 0) (hp' : p ‚â† ‚àû) {s : Set Œ±} (hs : measurable_set[m] s)
    {f g : Œ± ‚Üí Œ≤} {c : ‚Ñù} (hc : 0 ‚â§ c) (hf : ‚àÄ, ‚àÄ x ‚àà s, ‚àÄ, dist (f x) (g x) ‚â§ c) :
    snorm (s.indicator (f - g)) p Œº ‚â§ Ennreal.ofReal c * Œº s ^ (1 / p.toReal) := by
  have : ‚àÄ x, ‚à•s.indicator (f - g) x‚à• ‚â§ ‚à•s.indicator (fun x => c) x‚à• := by
    intro x
    by_cases' hx : x ‚àà s
    ¬∑ rw [indicator_of_mem hx, indicator_of_mem hx, Pi.sub_apply, ‚Üê dist_eq_norm, Real.norm_eq_abs, abs_of_nonneg hc]
      exact hf x hx
      
    ¬∑ simp [indicator_of_not_mem hx]
      
  refine' le_trans‚Çì (snorm_mono this) _
  rw [snorm_indicator_const hs hp hp']
  refine' Ennreal.mul_le_mul (le_of_eq‚Çì _) le_rfl
  rw [‚Üê of_real_norm_eq_coe_nnnorm, Real.norm_eq_abs, abs_of_nonneg hc]

/-- A sequence of uniformly integrable functions which converges Œº-a.e. converges in Lp. -/
theorem tendsto_Lp_of_tendsto_ae_of_meas {mŒ≤ : MeasurableSpace Œ≤} [BorelSpace Œ≤] [SecondCountableTopology Œ≤]
    [IsFiniteMeasure Œº] (hp : 1 ‚â§ p) (hp' : p ‚â† ‚àû) {f : ‚Ñï ‚Üí Œ± ‚Üí Œ≤} {g : Œ± ‚Üí Œ≤} (hf : ‚àÄ n, Measurable (f n))
    (hg : Measurable g) (hg' : Mem‚Ñíp g p Œº) (hui : UnifIntegrable f p Œº)
    (hfg : ‚àÄ·µê x ‚àÇŒº, Tendsto (fun n => f n x) atTop (ùìù (g x))) : Tendsto (fun n => snorm (f n - g) p Œº) atTop (ùìù 0) := by
  rw [Ennreal.tendsto_at_top_zero]
  intro Œµ hŒµ
  by_cases' Œµ < ‚àû
  swap
  ¬∑ rw [not_lt‚Çì, top_le_iff] at h
    exact
      ‚ü®0, fun n hn => by
        simp [h]‚ü©
    
  by_cases' hŒº : Œº = 0
  ¬∑ exact
      ‚ü®0, fun n hn => by
        simp [hŒº]‚ü©
    
  have hŒµ' : 0 < Œµ.to_real / 3 :=
    div_pos (Ennreal.to_real_pos (gt_iff_lt.1 hŒµ).Ne.symm h.ne)
      (by
        norm_num)
  have hdivp : 0 ‚â§ 1 / p.to_real := by
    refine' one_div_nonneg.2 _
    rw [‚Üê Ennreal.zero_to_real, Ennreal.to_real_le_to_real Ennreal.zero_ne_top hp']
    exact le_trans‚Çì ennreal.zero_lt_one.le hp
  have hpow : 0 < measure_univ_nnreal Œº ^ (1 / p.to_real) := Real.rpow_pos_of_pos (measure_univ_nnreal_pos hŒº) _
  obtain ‚ü®Œ¥‚ÇÅ, hŒ¥‚ÇÅ, hsnorm‚ÇÅ‚ü© := hui hŒµ'
  obtain ‚ü®Œ¥‚ÇÇ, hŒ¥‚ÇÇ, hsnorm‚ÇÇ‚ü© := hg'.snorm_indicator_le Œº hp hp' hŒµ'
  obtain ‚ü®t, htm, ht‚ÇÅ, ht‚ÇÇ‚ü© := tendsto_uniformly_on_of_ae_tendsto' hf hg hfg (lt_min‚Çì hŒ¥‚ÇÅ hŒ¥‚ÇÇ)
  rw [Metric.tendsto_uniformly_on_iff] at ht‚ÇÇ
  specialize
    ht‚ÇÇ (Œµ.to_real / (3 * measure_univ_nnreal Œº ^ (1 / p.to_real)))
      (div_pos (Ennreal.to_real_pos (gt_iff_lt.1 hŒµ).Ne.symm h.ne)
        (mul_pos
          (by
            norm_num)
          hpow))
  obtain ‚ü®N, hN‚ü© := eventually_at_top.1 ht‚ÇÇ
  clear ht‚ÇÇ
  refine' ‚ü®N, fun n hn => _‚ü©
  rw [‚Üê t.indicator_self_add_compl (f n - g)]
  refine'
    le_trans‚Çì
      (snorm_add_le (((hf n).sub hg).indicator htm).AeMeasurable (((hf n).sub hg).indicator htm.compl).AeMeasurable hp)
      _
  rw [sub_eq_add_neg, indicator_add' t, indicator_neg']
  refine'
    le_trans‚Çì
      (add_le_add_right (snorm_add_le ((hf n).indicator htm).AeMeasurable (hg.indicator htm).neg.AeMeasurable hp) _) _
  have hnf : snorm (t.indicator (f n)) p Œº ‚â§ Ennreal.ofReal (Œµ.to_real / 3) := by
    refine' hsnorm‚ÇÅ n t htm (le_trans‚Çì ht‚ÇÅ _)
    rw [Ennreal.of_real_le_of_real_iff hŒ¥‚ÇÅ.le]
    exact min_le_left‚Çì _ _
  have hng : snorm (t.indicator g) p Œº ‚â§ Ennreal.ofReal (Œµ.to_real / 3) := by
    refine' hsnorm‚ÇÇ t htm (le_trans‚Çì ht‚ÇÅ _)
    rw [Ennreal.of_real_le_of_real_iff hŒ¥‚ÇÇ.le]
    exact min_le_right‚Çì _ _
  have hlt : snorm (t·∂ú.indicator (f n - g)) p Œº ‚â§ Ennreal.ofReal (Œµ.to_real / 3) := by
    specialize hN n hn
    have :=
      snorm_sub_le_of_dist_bdd Œº (lt_of_lt_of_le‚Çì Ennreal.zero_lt_one hp).Ne.symm hp' htm.compl _ fun x hx =>
        (dist_comm (g x) (f n x) ‚ñ∏ (hN x hx).le :
          dist (f n x) (g x) ‚â§ Œµ.to_real / (3 * measure_univ_nnreal Œº ^ (1 / p.to_real)))
    refine' le_trans‚Çì this _
    rw [div_mul_eq_div_mul_one_div, ‚Üê Ennreal.of_real_to_real (measure_lt_top Œº (t·∂ú)).Ne,
      Ennreal.of_real_rpow_of_nonneg Ennreal.to_real_nonneg hdivp, ‚Üê Ennreal.of_real_mul, mul_assoc]
    ¬∑ refine' Ennreal.of_real_le_of_real (mul_le_of_le_one_right hŒµ'.le _)
      rw [mul_comm, mul_one_div, div_le_one]
      ¬∑ refine'
          Real.rpow_le_rpow Ennreal.to_real_nonneg (Ennreal.to_real_le_of_le_of_real (measure_univ_nnreal_pos hŒº).le _)
            hdivp
        rw [Ennreal.of_real_coe_nnreal, coe_measure_univ_nnreal]
        exact measure_mono (subset_univ _)
        
      ¬∑ exact Real.rpow_pos_of_pos (measure_univ_nnreal_pos hŒº) _
        
      
    ¬∑ refine' mul_nonneg hŒµ'.le (one_div_nonneg.2 hpow.le)
      
    ¬∑ rw [div_mul_eq_div_mul_one_div]
      exact mul_nonneg hŒµ'.le (one_div_nonneg.2 hpow.le)
      
  have : Ennreal.ofReal (Œµ.to_real / 3) = Œµ / 3 := by
    rw
      [Ennreal.of_real_div_of_pos
        (show (0 : ‚Ñù) < 3 by
          norm_num),
      Ennreal.of_real_to_real h.ne]
    simp
  rw [this] at hnf hng hlt
  rw [snorm_neg, ‚Üê Ennreal.add_thirds Œµ, ‚Üê sub_eq_add_neg]
  exact add_le_add_three hnf hng hlt

/-- A sequence of uniformly integrable functions which converges Œº-a.e. converges in Lp. -/
theorem tendsto_Lp_of_tendsto_ae {mŒ≤ : MeasurableSpace Œ≤} [BorelSpace Œ≤] [SecondCountableTopology Œ≤] [IsFiniteMeasure Œº]
    (hp : 1 ‚â§ p) (hp' : p ‚â† ‚àû) {f : ‚Ñï ‚Üí Œ± ‚Üí Œ≤} {g : Œ± ‚Üí Œ≤} (hf : ‚àÄ n, AeMeasurable (f n) Œº) (hg : Mem‚Ñíp g p Œº)
    (hui : UnifIntegrable f p Œº) (hfg : ‚àÄ·µê x ‚àÇŒº, Tendsto (fun n => f n x) atTop (ùìù (g x))) :
    Tendsto (fun n => snorm (f n - g) p Œº) atTop (ùìù 0) := by
  suffices tendsto (fun n : ‚Ñï => snorm ((hf n).mk (f n) - hg.1.mk g) p Œº) at_top (ùìù 0) by
    convert this
    exact funext fun n => snorm_congr_ae ((hf n).ae_eq_mk.sub hg.1.ae_eq_mk)
  refine'
    tendsto_Lp_of_tendsto_ae_of_meas Œº hp hp' (fun n => (hf n).measurable_mk) hg.1.measurable_mk
      (hg.ae_eq hg.1.ae_eq_mk) (hui.ae_eq fun n => (hf n).ae_eq_mk) _
  have h_ae_forall_eq : ‚àÄ·µê x ‚àÇŒº, ‚àÄ n, f n x = (hf n).mk (f n) x := by
    rw [ae_all_iff]
    exact fun n => (hf n).ae_eq_mk
  filter_upwards [hfg, h_ae_forall_eq, hg.1.ae_eq_mk] with x hx_tendsto hxf_eq hxg_eq
  rw [‚Üê hxg_eq]
  convert hx_tendsto
  ext1 n
  exact (hxf_eq n).symm

variable {mŒ≤ : MeasurableSpace Œ≤} [BorelSpace Œ≤]

variable {f : ‚Ñï ‚Üí Œ± ‚Üí Œ≤} {g : Œ± ‚Üí Œ≤}

include mŒ≤

theorem unif_integrable_of_tendsto_Lp_zero (hp : 1 ‚â§ p) (hp' : p ‚â† ‚àû) (hf : ‚àÄ n, Mem‚Ñíp (f n) p Œº)
    (hf_tendsto : Tendsto (fun n => snorm (f n) p Œº) atTop (ùìù 0)) : UnifIntegrable f p Œº := by
  intro Œµ hŒµ
  rw [Ennreal.tendsto_at_top_zero] at hf_tendsto
  obtain ‚ü®N, hN‚ü© :=
    hf_tendsto (Ennreal.ofReal Œµ)
      (by
        simpa)
  set F : Fin‚Çì N ‚Üí Œ± ‚Üí Œ≤ := fun n => f n
  have hF : ‚àÄ n, mem_‚Ñíp (F n) p Œº := fun n => hf n
  obtain ‚ü®Œ¥‚ÇÅ, hŒ¥pos‚ÇÅ, hŒ¥‚ÇÅ‚ü© := unif_integrable_fin Œº hp hp' hF hŒµ
  refine' ‚ü®Œ¥‚ÇÅ, hŒ¥pos‚ÇÅ, fun n s hs hŒºs => _‚ü©
  by_cases' hn : n < N
  ¬∑ exact hŒ¥‚ÇÅ ‚ü®n, hn‚ü© s hs hŒºs
    
  ¬∑ exact (snorm_indicator_le _).trans (hN n (not_lt‚Çì.1 hn))
    

variable [SecondCountableTopology Œ≤]

/-- Convergence in Lp implies uniform integrability. -/
theorem unif_integrable_of_tendsto_Lp (hp : 1 ‚â§ p) (hp' : p ‚â† ‚àû) (hf : ‚àÄ n, Mem‚Ñíp (f n) p Œº) (hg : Mem‚Ñíp g p Œº)
    (hfg : Tendsto (fun n => snorm (f n - g) p Œº) atTop (ùìù 0)) : UnifIntegrable f p Œº := by
  have : f = (fun n => g) + fun n => f n - g := by
    ext1 n
    simp
  rw [this]
  refine' unif_integrable.add _ _ hp (fun _ => hg.ae_measurable) fun n => (hf n).1.sub hg.ae_measurable
  ¬∑ exact unif_integrable_const Œº hp hp' hg
    
  ¬∑ exact unif_integrable_of_tendsto_Lp_zero Œº hp hp' (fun n => (hf n).sub hg) hfg
    

/-- Forward direction of Vitali's convergence theorem: if `f` is a sequence of uniformly integrable
functions that converge in measure to some function `g` in a finite measure space, then `f`
converge in Lp to `g`. -/
theorem tendsto_Lp_of_tendsto_in_measure [IsFiniteMeasure Œº] (hp : 1 ‚â§ p) (hp' : p ‚â† ‚àû) (hf : ‚àÄ n, AeMeasurable (f n) Œº)
    (hg : Mem‚Ñíp g p Œº) (hui : UnifIntegrable f p Œº) (hfg : TendstoInMeasure Œº f atTop g) :
    Tendsto (fun n => snorm (f n - g) p Œº) atTop (ùìù 0) := by
  refine' tendsto_of_subseq_tendsto fun ns hns => _
  obtain ‚ü®ms, hms, hms'‚ü© := tendsto_in_measure.exists_seq_tendsto_ae fun Œµ hŒµ => (hfg Œµ hŒµ).comp hns
  exact
    ‚ü®ms,
      tendsto_Lp_of_tendsto_ae Œº hp hp' (fun _ => hf _) hg
        (fun Œµ hŒµ =>
          let ‚ü®Œ¥, hŒ¥, hŒ¥'‚ü© := hui hŒµ
          ‚ü®Œ¥, hŒ¥, fun i s hs hŒºs => hŒ¥' _ s hs hŒºs‚ü©)
        hms'‚ü©

/-- **Vitali's convergence theorem**: A sequence of functions `f` converges to `g` in Lp if and
only if it is uniformly integrable and converges to `g` in measure. -/
theorem tendsto_in_measure_iff_tendsto_Lp [IsFiniteMeasure Œº] (hp : 1 ‚â§ p) (hp' : p ‚â† ‚àû) (hf : ‚àÄ n, Mem‚Ñíp (f n) p Œº)
    (hg : Mem‚Ñíp g p Œº) :
    TendstoInMeasure Œº f atTop g ‚àß UnifIntegrable f p Œº ‚Üî Tendsto (fun n => snorm (f n - g) p Œº) atTop (ùìù 0) :=
  ‚ü®fun h => tendsto_Lp_of_tendsto_in_measure Œº hp hp' (fun n => (hf n).1) hg h.2 h.1, fun h =>
    ‚ü®tendsto_in_measure_of_tendsto_snorm (lt_of_lt_of_le‚Çì Ennreal.zero_lt_one hp).Ne.symm (fun n => (hf n).AeMeasurable)
        hg.AeMeasurable h,
      unif_integrable_of_tendsto_Lp Œº hp hp' hf hg h‚ü©‚ü©

end UnifIntegrable

end MeasureTheory

